#!/usr/bin/env perl

use App::Rad;
use DateTime;
use Data::Dumper;
use DBI;
use File::Slurp qw/read_file/;
use List::MoreUtils qw/firstidx/;
use List::Util qw/min max/;

use v5.16;

App::Rad->run();

sub setup {
    my $c = shift;

    $c->register_commands({
            install => 'Install db_migrate_tiny',
            latest => 'Migrate to the latest timestamp',
            generate => 'Generate a new migration',
    });
}

sub pre_process {
    my $c = shift;

    $c->stash->{migration_dir} = $c->options->{dir} || 'migrations';

    unless ($c->cmd ~~ ['generate', 'help']){
        $c->getopt( 'dsn|d=s', 'user|u=s', 'pass|p=s' )
            or $c->execute('usage') and return;

        my $dbh = DBI->connect($c->options->{dsn}, $c->options->{user},
            $c->options->{pass}, { RaiseError => 1, AutoCommit => 0 });
        $c->stash->{dbh} = $dbh;
    }
}

sub post_process {
    my $c = shift;
    $c->stash->{dbh}->disconnect if $c->stash->{dbh};
}

sub install {
    my $c = shift;
    $c->stash->{dbh}->do(
        'CREATE TABLE db_migrate_tiny (version VARCHAR(20) PRIMARY KEY);');
    $c->stash->{dbh}->commit;
}

sub latest {
    my $c = shift;
    my $root = $c->stash->{migration_dir};
    my @dirs = _migrations($c);

    my $rows = $c->stash->{dbh}->selectcol_arrayref(
        'SELECT version FROM db_migrate_tiny ORDER BY version;');

    my %diff;
    @diff{ @dirs } = @dirs;
    delete @diff{ @$rows };

    my @diff = keys(%diff);
    my $idx = firstidx{ $_ == min(@diff) } @dirs;
    $idx = $idx ? $idx-- : $idx;

    to($c, $dirs[$idx]);
    to($c, max(@dirs));
}

sub to {
    my ($c, $to_version) = @_;
    my $root = $c->stash->{migration_dir};
    my @dirs = _migrations($c);
    my $rows = $c->stash->{dbh}->selectcol_arrayref(
        'SELECT version FROM db_migrate_tiny;');
    my @versions = @$rows;
    my $current_version = max(@versions) || '';

    if ($current_version > $to_version){
        # Downgrade
        for my $v (reverse @versions){
            if ($v > $to_version){
                my $down_sql = read_file("$root/$v/down.sql");
                $c->stash->{dbh}->do($down_sql);
                $c->stash->{dbh}->do(
                    "DELETE FROM db_migrate_tiny WHERE version ='$v';");
            }
        }
    } elsif($current_version < $to_version) {
        my @list = grep {$_ > $current_version} @dirs;
        # Upgrade
        for my $d (@list){
            if ($d <= $to_version){
                my $up_sql = read_file("$root/$d/up.sql");
                $c->stash->{dbh}->do($up_sql);
                $c->stash->{dbh}->do(
                    "INSERT INTO db_migrate_tiny (version) VALUES ('$d');");
            }
        }
    }
    $c->stash->{dbh}->commit;
}

sub generate {
    my $c = shift;
    my $root = $c->stash->{migration_dir};
    my $now = DateTime->now->epoch;
    `mkdir $root/$now`;
    `touch $root/$now/up.sql`;
    `touch $root/$now/down.sql`;
    say "Created migration $root/$now";
}

sub _migrations {
    my ($c) = @_;
    my $root = $c->stash->{migration_dir};
    return split /\n/, `ls -1 $root`;
}
